%% Settings
nSensors = 4;

%% Setup
% setup GUI
f = figure;
H = uicontrol('Style','PushButton', 'String', 'Break', 'Callback', 'delete(gcbf)');

% % Setup arduino communication
instrfind('Port','COM8') % Check if arduinoSensor is in use
arduinoSensor = serial('COM8','BaudRate',9600);
arduinoSensor.Terminator = 'CR/LF';
command = 'a';
fopen(arduinoSensor);
pause(5);

% Setup Data Matrix
sensorData = zeros(nSensors, 4);

%% Loop
% Keep looping until GUI is closed (break button)
while (ishandle(H))
    disp(clock);

    fprintf(arduinoSensor,command);
    pause(0.8); % Try decreasing pause if reading too slow
    for n=1:nSensors
        sensorData(n,:) = str2double(strsplit(fgetl(arduinoSensor),','));
    end
    
    coords = myNN(reshape(sensorData.',1,[]));

    hold off;
    for i=1:6
        plot(coords((i*2)-1), coords(i*2),'-mo', 'LineWidth',2, 'MarkerEdgeColor','k', 'MarkerFaceColor',[1 0 0], 'MarkerSize',10);
        hold on;
    end
    
    % Set axis appropriately
    axis([40 350 0 400]); axis equal; set(gca,'Ydir','reverse');  
    
%     pause(0.2); % Add pause if reading too fast

end

fclose(arduinoSensor);
close all 

%% NN
function [Y,Xf,Af] = myNN(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Jun-2018 12:10:51.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx16 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx12 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1260;2350;3042;6907;1336;2295;2529;6298;1395;2178;2445;6075;991;1716;2020;4876];
x1_step1.gain = [0.00589970501474926;0.00215285252960172;0.00143884892086331;0.000749063670411985;0.00429184549356223;0.00205761316872428;0.00167224080267559;0.000739644970414201;0.00446428571428571;0.00198019801980198;0.00148920327624721;0.000693240901213172;0.00536193029490617;0.0018796992481203;0.00140154169586545;0.000673627484001347];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.777462168209868576;-0.37336049871704407588;-0.64750048589655218034;1.5411098514885948063;-0.30705355779139470451;-0.18031522021458323835;0.66369595513901680217;0.30604767481377109783;-0.30540694569406601211;0.65752481345145430414];
IW1_1 = [-0.074491599943652120341 -0.0051085159384569936436 0.23794157962512291205 -0.1972241181300915247 0.099510799536855237823 0.40867477121730799716 0.082611683515417047574 -0.33409354457179574194 0.15502215708418748408 -0.023970168287021236669 0.37273080560898852465 -0.108343330747436975 0.21986529976580959644 -0.55650558427316199062 -0.52947579452858983817 -0.92679551597943621299;0.21410786253283192737 -1.3839837014794953429 0.25497789749675492388 0.27834881228593222335 -0.33112793507619964206 1.0501995326746675907 0.74725811458060664716 -1.2855696679934076609 -0.18082537610433177533 1.0124260684739183613 1.0919178461136584968 0.7596865540060125932 -1.2512357149531954104 -0.97662093304571373498 1.3640166601273113756 -0.84747727524224325535;-0.001012347246483187406 0.34473743327205447207 -0.50627170203874427568 0.29813252899958914144 0.062958141009072376981 -0.94153188246299468478 -0.10079134657779099948 1.2188741344669551392 0.15850230878819210334 -0.19394928084914628275 -0.64620156855909594018 -0.3676837292645210864 0.29310862497905193491 0.69953376809575473771 0.17116368068271972658 -0.44975656518416884389;-0.16040953381919334508 2.4368508544087283951 0.55548232243538386843 -3.5077357770165424888 1.5085354781047657369 0.66859342708984659254 3.0870783964643080388 2.0579789084723536519 -2.2286118841519484413 -2.375326032894180095 -0.12687366105340247557 -2.1875962225473783995 0.95929064189500679039 0.015164732273649981359 -2.0127734189891470784 -0.68112213818334388371;-0.047771054616131361503 -0.42998463271536202512 0.035462524093302347228 0.52556003726833755429 0.14317779947618991532 -0.26166564059916352925 -0.71860961084538599319 0.68327137373040003343 -0.49857646088639590021 0.67992401978447147837 -0.10430323387763730525 0.41679857311883355964 0.084061499620090712748 0.0059961477614273693548 -0.45104017376983918108 -0.2862415621196591764;-0.12642170103555805394 -0.89062545092326084184 -0.81171934881486196289 1.8075787780272078997 0.75741989456403990832 -1.192389981893057449 -1.9664266886414947244 2.4144768620452534691 -1.1852458883106928855 1.4588142721852699335 -0.57439660531472869209 0.58132781777943975943 -0.15034123594272624791 0.45369289130315876291 1.3384891918571937275 -1.2723638215632804283;0.23507010930499158685 -1.5036691150330681044 0.54796636328361258972 1.3013437048455511746 -0.15655291573515117687 0.43907418955558347173 -0.61362860654340167788 -0.64809253524739196539 -0.28517756188529441719 2.3124461314021762526 0.66037422262940137507 -0.77024669950638258165 0.29783041089384237887 1.1636415480844530812 -0.14255953697626477794 -1.4431086186518331527;0.071348201697571084212 1.0743373265753790591 -0.41221101138492383109 -0.77735946983231640761 -0.087309100174496126479 -0.38999009321002392481 1.088223633733604423 -0.31685311930387766166 0.91346195551265574331 -1.1305234736419214059 -0.71774618342548124339 -0.58302721460369100193 0.040101691930058046276 0.56210529618518811912 0.58492036452416462655 -0.0253554658751191965;0.16542553452608316222 1.0063442219801463917 -0.018360865345737845122 -1.4013396630630789996 -0.60851853536204503214 0.64224193179575406187 2.3155305145724187632 -1.849148616645806209 1.4375222668444003205 -1.0935745034264845454 0.16555153347770376615 -1.1844244505665497691 -0.18840126371425311436 -0.096066445871968650372 0.67023359522693071177 0.085241783946132909655;-0.036289930489664772029 0.52931576096255650299 -0.2251629408561248713 -0.33097899579255374292 0.69949414996601955163 -0.53920473187458428654 0.076166709374928948106 -0.5153921681557362966 -0.097236831030162951262 -0.67143532823413920596 -0.84506793092715226656 0.99882205670426604804 0.22540516373830965513 -0.37030716073491970475 0.80290968070644974652 -0.43301715813897523333];

% Layer 2
b2 = [-0.32329589926272062073;0.47348249299901978837;0.87719235282996432801;1.5275828494042684724;0.62861017928443707614;1.6268581103642043573;1.1193560260416282048;1.0864399903803800829;0.0085498062520626173788;-0.64090790467345948311;0.84423918372042638936;-0.09335324216836292377];
LW2_1 = [2.3661764824330004942 0.53936360166965491292 -2.2564874420784044595 0.057043291540079005264 1.953959153867166787 -0.70070802741466275965 0.13522605966135728406 4.1251368146477274124 -2.4629564281291984607 -1.2923630871649289809;0.50212044109700315619 0.095605513559359922571 -0.37904955655564842587 0.073675841121373430997 2.0171620799631559962 -0.44501908307778448304 -0.1110339957311007042 0.69333752403474480097 0.033582584198269767317 0.081483328399013468801;3.4166692446131530225 0.99857813456166621968 -0.37009119765766235188 0.080713120393671816677 -0.12251338187712253192 -1.4239001012553709202 0.26146752031380060544 3.353738313087232914 -3.1083852352639746996 -0.992695734456976564;0.9812884575267414311 0.72053488438908652736 1.7884591183617297716 0.10349182348207086601 1.2038394031522221539 -1.2619017192763690716 -0.0019857446368906645634 1.0228661212563185945 -1.0942126256562838549 -0.073873215431631583661;3.6975069291741413657 0.31119355385474067877 -1.9757954807522273288 0.11243510943487505793 -0.63493673673854511552 -0.64375187377886400331 0.19355909273511712199 1.845523889372999049 -1.6938600258437648272 -0.57583780871253398281;0.8554100599049001552 0.28756954939522877401 0.96506278587626448395 0.10048663867294978236 2.3203810457719926674 -0.64783655963627584384 -0.0030106095828100342023 0.89100812911499094326 -0.15994049894026873826 -0.18535353245441474335;3.6503198327175474525 -0.91292237037236068087 -2.6795066086297261165 0.24813266189245314353 -2.1946331709271769128 0.45706607548069039249 0.0415980812235320907 -1.5478551085712268787 1.2925219434518686601 0.2468422673916178256;0.54133838425795066662 -0.04715052647282792081 -0.29653538329176015731 0.12160046049435369042 3.4283820366520574296 -0.15894094022676616418 0.026234279980769683455 1.355230917382917788 0.26987102542597662946 -0.50032781584920549278;2.3366819393124305115 -0.076713737745963225811 -2.2658147213657739982 0.074567890242651688193 -1.3497070656987188997 -0.25968019143176923613 0.22986626930100187427 -0.37493214396461044258 0.30268392615475248064 0.065875562186749822557;-1.0354737499320296745 -0.63956533951378757852 0.66086630019528613822 0.22163311017065095987 -0.14777095222737818281 0.21942526102278439581 -0.42532205487367014118 -0.80068480937172237244 -1.4942777763164933891 -0.54497798939376085325;1.6743015281328559318 0.77506015244942683129 -0.1027395809130525195 -0.1019677657714537361 -1.564580260333911399 -0.83754292057878509947 0.06620853101479594327 -1.0567208202385021121 -0.47353896230517866783 0.57537057453244022653;-1.2448033286349005078 -1.6443101394742740684 0.97732966336795434881 0.075051807867090203352 1.2927366713834804735 1.2307775591700036433 -0.30846128389865484776 -0.60895128513869523079 -1.2150670310548568054 -0.87515271266791450078];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.0313510808430383;0.0154089393723903;0.06366644495922;0.0229668925576389;0.164960896616471;0.042410209378519;0.481673613481989;0.127075166054148;1.1624010762603;1.27765950691423;1.32267383518989;1.19343657056482];
y1_step1.xoffset = [61.5840233037524;27.913039883455;114.147519042322;22.6631272898329;167.470412769273;22.1642998572976;221.468044719651;26.5599526643064;275.279423478827;30;327.510181591738;30.7230611699015];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
